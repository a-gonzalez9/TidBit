import React, { useState, useEffect } from "react"; import { addDays, startOfWeek, format } from "date-fns"; import Task from "./Task.js"; import Modal from "react-modal"; import "./index.css"; Modal.setAppElement("#root"); export default function TaskBreakdown() { const [tasks, setTasks] = useState([]); const [currentWeek, setCurrentWeek] = useState(new Date()); const [selectedTaskId, setSelectedTaskId] = useState(null); const [breakdownChecks, setBreakdownChecks] = useState([]); const [modalOpen, setModalOpen] = useState(false); const [formData, setFormData] = useState({ task: "", date: "", time: "", description: "", priority: "Medium", breakdown: [], }); useEffect(() => { setTasks(Task.getAll()); }, []); const weekStart = startOfWeek(currentWeek, { weekStartsOn: 1 }); const weekEnd = addDays(weekStart, 6); const tasksThisWeek = tasks .filter((t) => { const taskDate = new Date(t.date); return taskDate >= weekStart && taskDate <= weekEnd; }) .sort((a, b) => { const priorityOrder = { High: 0, Medium: 1, Low: 2 }; if (priorityOrder[a.priority] !== priorityOrder[b.priority]) { return priorityOrder[a.priority] - priorityOrder[b.priority]; } return new Date(a.date) - new Date(b.date); }); const selectedTask = tasks.find((t) => t.id === selectedTaskId); const handleTaskSelect = (task) => { setSelectedTaskId(task.id); setBreakdownChecks(task.breakdown.map(() => false)); }; const handleBreakdownToggle = (idx) => { const newChecks = [...breakdownChecks]; newChecks[idx] = !newChecks[idx]; setBreakdownChecks(newChecks); }; const handleCompleteTask = () => { if (!selectedTask) return; const updatedTask = { ...selectedTask, completed: true }; Task.update(selectedTask.id, updatedTask); setTasks(Task.getAll()); setSelectedTaskId(null); setBreakdownChecks([]); }; const prevWeek = () => setCurrentWeek(addDays(currentWeek, -7)); const nextWeek = () => setCurrentWeek(addDays(currentWeek, 7)); const openModal = () => setModalOpen(true); const closeModal = () => setModalOpen(false); const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value }); const handleSubmit = (e) => { e.preventDefault(); const newTask = new Task( tasks.length, formData.task, formData.description, formData.priority, formData.date, formData.time, formData.breakdown ); newTask.save(); setTasks(Task.getAll()); setFormData({ task: "", date: "", time: "", description: "", priority: "Medium", breakdown: [], }); closeModal(); }; const checkedCount = breakdownChecks.filter(Boolean).length; const totalCount = breakdownChecks.length; const allChecked = checkedCount === totalCount && totalCount > 0; return ( <div style={{ padding: "1.6rem", fontFamily: "Montserrat" }}> {/* Header */} <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "2rem", }} > <div> <button onClick={prevWeek} style={{ marginRight: "0.5rem", borderRadius: "8px", padding: "0.3rem 0.6rem", fontSize: "1rem", }} > &lt; </button> <button onClick={nextWeek} style={{ borderRadius: "8px", padding: "0.3rem 0.6rem", fontSize: "1rem", }} > &gt; </button> </div> <div style={{ fontFamily: "qurova", fontSize: "1.8rem" }}> {format(weekStart, "LLLL")}{" "} <span style={{ fontFamily: "Montserrat", fontWeight: "bold" }}> {format(weekStart, "dd")} - {format(weekEnd, "dd")} </span> </div> <button onClick={openModal} style={{ backgroundColor: "#3c1c7a", color: "white", padding: "0.5rem 1rem", border: "none", fontFamily: "montserrat", fontWeight: "bold", borderRadius: "12px", fontSize: "1rem", cursor: "pointer", }} > + Add Task </button> </div> {/* Columns */} <div style={{ display: "flex", gap: "2rem", height: "70vh" }}> {/* Tasks Column */} <div style={{ flex: 1, border: "1px solid #ccc", borderRadius: "12px", padding: "1rem", overflowY: "auto", }} > <h2 style={{ marginTop: "1rem", marginBottom: "1rem" }}>Tasks</h2> {["High", "Medium", "Low"].map((priority) => ( <div key={priority} style={{ marginBottom: "1rem" }}> <h3>{priority}</h3> {tasksThisWeek .filter((t) => t.priority === priority) .map((task) => ( <div key={task.id} style={{ display: "flex", alignItems: "center", gap: "0.5rem", padding: "0.25rem", cursor: "pointer", backgroundColor: selectedTaskId === task.id ? "#e0d4ff" : "transparent", borderRadius: "8px", }} onClick={() => handleTaskSelect(task)} > <input type="checkbox" checked={task.completed || false} readOnly /> <div>{task.name}</div> </div> ))} </div> ))} </div> {/* Breakdown Column */} <div style={{ flex: 1, border: "1px solid #ccc", borderRadius: "12px", padding: "1rem", display: "flex", flexDirection: "column", overflowY: "auto", }} > <h2 style={{ marginBottom: "1rem" }}>Breakdown</h2> {selectedTask ? ( <> <div style={{ flex: 1 }}> {selectedTask.breakdown.map((step, idx) => ( <div key={idx} style={{ display: "flex", alignItems: "center", gap: "0.5rem", marginBottom: "0.5rem", }} > <input type="checkbox" checked={breakdownChecks[idx]} onChange={() => handleBreakdownToggle(idx)} /> <div>{step}</div> </div> ))} </div> <div style={{ backgroundColor: allChecked ? "#3c1c7a" : "#dcd0ff", color: allChecked ? "white" : "#3c1c7a", padding: "0.5rem", borderRadius: "8px", textAlign: "center", cursor: allChecked ? "pointer" : "default", marginTop: "auto", fontWeight: "bold", }} onClick={() => allChecked && handleCompleteTask()} > Completed {checkedCount} of {totalCount} </div> </> ) : ( <div>Select a task to see its breakdown.</div> )} </div> </div> {/* Modal */} <Modal isOpen={modalOpen} onRequestClose={closeModal} contentLabel="Add Task" style={{ content: { width: "400px", maxWidth: "90%", height: "fit-content", margin: "auto", borderRadius: "12px", padding: "1rem", }, }} > <h2>Add Task</h2> <form onSubmit={handleSubmit} style={{ display: "flex", flexDirection: "column", gap: "0.5rem" }} > <label> Task: <input type="text" name="task" value={formData.task} onChange={handleChange} required style={{ width: "100%", borderRadius: "6px", padding: "4px" }} /> </label> <label> Date: <input type="date" name="date" value={formData.date} onChange={handleChange} required style={{ width: "100%", borderRadius: "6px", padding: "4px" }} /> </label> <label> Time: <input type="time" name="time" value={formData.time} onChange={handleChange} required style={{ width: "100%", borderRadius: "6px", padding: "4px" }} /> </label> <label> Description: <textarea name="description" value={formData.description} onChange={handleChange} rows="3" style={{ width: "100%", borderRadius: "6px", padding: "4px" }} /> </label> <label> Priority: <select name="priority" value={formData.priority} onChange={handleChange} style={{ width: "100%", borderRadius: "6px", padding: "4px" }} > <option>High</option> <option>Medium</option> <option>Low</option> </select> </label> <button type="submit" style={{ backgroundColor: "#3c1c7a", color: "white", padding: "0.5rem", border: "none", borderRadius: "12px", cursor: "pointer", marginTop: "0.5rem", }} > Save Task </button> </form> </Modal> </div> ); }